// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// coo_desc
mat coo_desc(mat X, mat M, colvec w, double gamma, int s, double lambda, int k, int max_iter, int update_phi_every, int w_sparse);
RcppExport SEXP _l0fcl_coo_desc(SEXP XSEXP, SEXP MSEXP, SEXP wSEXP, SEXP gammaSEXP, SEXP sSEXP, SEXP lambdaSEXP, SEXP kSEXP, SEXP max_iterSEXP, SEXP update_phi_everySEXP, SEXP w_sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< colvec >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type update_phi_every(update_phi_everySEXP);
    Rcpp::traits::input_parameter< int >::type w_sparse(w_sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(coo_desc(X, M, w, gamma, s, lambda, k, max_iter, update_phi_every, w_sparse));
    return rcpp_result_gen;
END_RCPP
}
// soft
colvec soft(colvec x, double T);
RcppExport SEXP _l0fcl_soft(SEXP xSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(soft(x, T));
    return rcpp_result_gen;
END_RCPP
}
// proj_simplex_l0
colvec proj_simplex_l0(colvec x, int s, colvec D);
RcppExport SEXP _l0fcl_proj_simplex_l0(SEXP xSEXP, SEXP sSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< colvec >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(proj_simplex_l0(x, s, D));
    return rcpp_result_gen;
END_RCPP
}
// proj_simplex_l1
colvec proj_simplex_l1(colvec x, double lambda, colvec D);
RcppExport SEXP _l0fcl_proj_simplex_l1(SEXP xSEXP, SEXP lambdaSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< colvec >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(proj_simplex_l1(x, lambda, D));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _l0fcl_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _l0fcl_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _l0fcl_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _l0fcl_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_l0fcl_coo_desc", (DL_FUNC) &_l0fcl_coo_desc, 10},
    {"_l0fcl_soft", (DL_FUNC) &_l0fcl_soft, 2},
    {"_l0fcl_proj_simplex_l0", (DL_FUNC) &_l0fcl_proj_simplex_l0, 3},
    {"_l0fcl_proj_simplex_l1", (DL_FUNC) &_l0fcl_proj_simplex_l1, 3},
    {"_l0fcl_rcpparma_hello_world", (DL_FUNC) &_l0fcl_rcpparma_hello_world, 0},
    {"_l0fcl_rcpparma_outerproduct", (DL_FUNC) &_l0fcl_rcpparma_outerproduct, 1},
    {"_l0fcl_rcpparma_innerproduct", (DL_FUNC) &_l0fcl_rcpparma_innerproduct, 1},
    {"_l0fcl_rcpparma_bothproducts", (DL_FUNC) &_l0fcl_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_l0fcl(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
